{"dependencies":[{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/package.json","includedInParent":true,"mtime":1528732074198},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/.babelrc","includedInParent":true,"mtime":1529143217746},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./internal/_checkForMethod","loc":{"line":1,"column":28}},{"name":"./internal/_curry1","loc":{"line":2,"column":20}},{"name":"./slice","loc":{"line":3,"column":18}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"./internal/_checkForMethod\"),r=i(e),t=require(\"./internal/_curry1\"),u=i(t),l=require(\"./slice\"),a=i(l);function i(e){return e&&e.__esModule?e:{default:e}}var d=(0,u.default)((0,r.default)(\"tail\",(0,a.default)(1,1/0)));exports.default=d;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/ramda/es/tail.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/ramda/es/tail.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/ramda/es/tail.js","original":{"line":3,"column":0}},{"generated":{"line":21,"column":0},"source":"../node_modules/ramda/es/tail.js","original":{"line":5,"column":0}},{"generated":{"line":48,"column":0},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":0}},{"name":"tail","generated":{"line":48,"column":4},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":4}},{"generated":{"line":48,"column":11},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":11}},{"generated":{"line":48,"column":24},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":24}},{"generated":{"line":48,"column":46},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":33}},{"generated":{"line":48,"column":59},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":46}},{"generated":{"line":48,"column":89},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":62}},{"generated":{"line":48,"column":95},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":46}},{"generated":{"line":48,"column":97},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":70}},{"generated":{"line":48,"column":110},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":83}},{"generated":{"line":48,"column":131},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":89}},{"generated":{"line":48,"column":132},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":83}},{"name":"Infinity","generated":{"line":48,"column":134},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":92}},{"generated":{"line":48,"column":142},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":83}},{"generated":{"line":48,"column":143},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":46}},{"generated":{"line":48,"column":144},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":24}},{"generated":{"line":48,"column":145},"source":"../node_modules/ramda/es/tail.js","original":{"line":32,"column":0}},{"name":"tail","generated":{"line":49,"column":18},"source":"../node_modules/ramda/es/tail.js","original":{"line":33,"column":15}}],"sources":{"../node_modules/ramda/es/tail.js":"import _checkForMethod from './internal/_checkForMethod';\nimport _curry1 from './internal/_curry1';\nimport slice from './slice';\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nvar tail = /*#__PURE__*/_curry1( /*#__PURE__*/_checkForMethod('tail', /*#__PURE__*/slice(1, Infinity)));\nexport default tail;"},"lineCount":null}},"hash":"9b3704d00771f632ed28887b08b38b12","cacheData":{"env":{}}}