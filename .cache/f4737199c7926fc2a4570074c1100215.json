{"dependencies":[{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/package.json","includedInParent":true,"mtime":1528732074198},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/.babelrc","includedInParent":true,"mtime":1529143217746},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/node_modules/js-function-reflector/package.json","includedInParent":true,"mtime":1515090536000},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/node_modules/js-function-reflector/.babelrc","includedInParent":true,"mtime":1515090536000},{"name":"./argument_parser","loc":{"line":1,"column":21}}],"generated":{"js":"var Parser = require('./argument_parser');\nvar whitespaceRegex = /[\\s\\n\\t]+/mg;\n\nmodule.exports = function(stringFunction, regex) {\n  var matches = regex.exec(stringFunction);\n  if (matches.length < 3) {\n    throw new Error('Invalid function');\n  }\n  var parser = new Parser();\n  var args = parser.parse(matches[2], this)\n\n  var name = matches[1] || 'anonymous';\n\n  return {\n    name: name,\n    args: args\n  };\n}\n","map":{"mappings":[{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/js-function-reflector/header_parser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}}],"sources":{"../node_modules/js-function-reflector/header_parser.js":"var Parser = require('./argument_parser');\nvar whitespaceRegex = /[\\s\\n\\t]+/mg;\n\nmodule.exports = function(stringFunction, regex) {\n  var matches = regex.exec(stringFunction);\n  if (matches.length < 3) {\n    throw new Error('Invalid function');\n  }\n  var parser = new Parser();\n  var args = parser.parse(matches[2], this)\n\n  var name = matches[1] || 'anonymous';\n\n  return {\n    name: name,\n    args: args\n  };\n}\n"},"lineCount":19}},"hash":"d0e7768ebfa384af59168f74bf820e2e","cacheData":{"env":{}}}