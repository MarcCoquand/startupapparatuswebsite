{"dependencies":[{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/package.json","includedInParent":true,"mtime":1528732074198},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/.babelrc","includedInParent":true,"mtime":1529143217746},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./internal/_aperture","loc":{"line":1,"column":22}},{"name":"./internal/_curry2","loc":{"line":2,"column":20}},{"name":"./internal/_dispatchable","loc":{"line":3,"column":26}},{"name":"./internal/_xaperture","loc":{"line":4,"column":23}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"./internal/_aperture\"),r=d(e),t=require(\"./internal/_curry2\"),u=d(t),a=require(\"./internal/_dispatchable\"),l=d(a),i=require(\"./internal/_xaperture\"),n=d(i);function d(e){return e&&e.__esModule?e:{default:e}}var f=(0,u.default)((0,l.default)([],n.default,r.default));exports.default=f;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/ramda/es/aperture.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/ramda/es/aperture.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/ramda/es/aperture.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"../node_modules/ramda/es/aperture.js","original":{"line":4,"column":0}},{"generated":{"line":25,"column":0},"source":"../node_modules/ramda/es/aperture.js","original":{"line":6,"column":0}},{"generated":{"line":46,"column":0},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":0}},{"name":"aperture","generated":{"line":46,"column":4},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":4}},{"generated":{"line":46,"column":15},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":15}},{"generated":{"line":46,"column":28},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":28}},{"generated":{"line":46,"column":50},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":37}},{"generated":{"line":46,"column":63},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":50}},{"generated":{"line":46,"column":91},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":64}},{"generated":{"line":46,"column":93},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":50}},{"name":"_xaperture","generated":{"line":46,"column":95},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":68}},{"generated":{"line":46,"column":114},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":50}},{"name":"_aperture","generated":{"line":46,"column":116},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":80}},{"generated":{"line":46,"column":134},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":50}},{"generated":{"line":46,"column":135},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":28}},{"generated":{"line":46,"column":136},"source":"../node_modules/ramda/es/aperture.js","original":{"line":27,"column":0}},{"name":"aperture","generated":{"line":47,"column":18},"source":"../node_modules/ramda/es/aperture.js","original":{"line":28,"column":15}}],"sources":{"../node_modules/ramda/es/aperture.js":"import _aperture from './internal/_aperture';\nimport _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xaperture from './internal/_xaperture';\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nvar aperture = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xaperture, _aperture));\nexport default aperture;"},"lineCount":null}},"hash":"7a9cbc50c3eab1a068be10905aef4032","cacheData":{"env":{}}}