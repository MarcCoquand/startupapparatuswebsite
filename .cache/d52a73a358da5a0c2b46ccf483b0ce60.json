{"dependencies":[{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/package.json","includedInParent":true,"mtime":1528732074198},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/.babelrc","includedInParent":true,"mtime":1529143217746},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./internal/_curry1","loc":{"line":1,"column":20}},{"name":"./nAry","loc":{"line":2,"column":17}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"./internal/_curry1\"),r=n(e),t=require(\"./nAry\"),u=n(t);function n(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(function(e){return(0,u.default)(1,e)});exports.default=a;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/ramda/es/unary.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/ramda/es/unary.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/ramda/es/unary.js","original":{"line":4,"column":0}},{"generated":{"line":45,"column":0},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":0}},{"name":"unary","generated":{"line":45,"column":4},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":4}},{"generated":{"line":45,"column":12},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":12}},{"generated":{"line":45,"column":25},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":25}},{"generated":{"line":45,"column":46},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":33}},{"name":"unary","generated":{"line":45,"column":55},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":42}},{"generated":{"line":45,"column":60},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":33}},{"name":"fn","generated":{"line":45,"column":61},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":48}},{"generated":{"line":45,"column":63},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":33}},{"generated":{"line":45,"column":65},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":52}},{"generated":{"line":46,"column":0},"source":"../node_modules/ramda/es/unary.js","original":{"line":33,"column":2}},{"generated":{"line":46,"column":9},"source":"../node_modules/ramda/es/unary.js","original":{"line":33,"column":9}},{"generated":{"line":46,"column":29},"source":"../node_modules/ramda/es/unary.js","original":{"line":33,"column":14}},{"generated":{"line":46,"column":30},"source":"../node_modules/ramda/es/unary.js","original":{"line":33,"column":9}},{"name":"fn","generated":{"line":46,"column":32},"source":"../node_modules/ramda/es/unary.js","original":{"line":33,"column":17}},{"generated":{"line":46,"column":34},"source":"../node_modules/ramda/es/unary.js","original":{"line":33,"column":9}},{"generated":{"line":46,"column":35},"source":"../node_modules/ramda/es/unary.js","original":{"line":33,"column":2}},{"generated":{"line":47,"column":0},"source":"../node_modules/ramda/es/unary.js","original":{"line":34,"column":1}},{"generated":{"line":47,"column":1},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":25}},{"generated":{"line":47,"column":2},"source":"../node_modules/ramda/es/unary.js","original":{"line":32,"column":0}},{"name":"unary","generated":{"line":48,"column":18},"source":"../node_modules/ramda/es/unary.js","original":{"line":35,"column":15}}],"sources":{"../node_modules/ramda/es/unary.js":"import _curry1 from './internal/_curry1';\nimport nAry from './nAry';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> b) -> (a -> b)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      var takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nvar unary = /*#__PURE__*/_curry1(function unary(fn) {\n  return nAry(1, fn);\n});\nexport default unary;"},"lineCount":null}},"hash":"308b3f3f98df3d2028c985d833ca561a","cacheData":{"env":{}}}