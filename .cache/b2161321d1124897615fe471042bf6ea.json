{"dependencies":[{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/package.json","includedInParent":true,"mtime":1528732074198},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/.babelrc","includedInParent":true,"mtime":1529143217746},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./internal/_curry3","loc":{"line":1,"column":20}},{"name":"./internal/_reduce","loc":{"line":2,"column":20}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"./internal/_curry3\"),r=a(e),t=require(\"./internal/_reduce\"),u=a(t);function a(e){return e&&e.__esModule?e:{default:e}}var l=(0,r.default)(u.default);exports.default=l;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/ramda/es/reduce.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/ramda/es/reduce.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/ramda/es/reduce.js","original":{"line":4,"column":0}},{"generated":{"line":63,"column":0},"source":"../node_modules/ramda/es/reduce.js","original":{"line":50,"column":0}},{"name":"reduce","generated":{"line":63,"column":4},"source":"../node_modules/ramda/es/reduce.js","original":{"line":50,"column":4}},{"generated":{"line":63,"column":13},"source":"../node_modules/ramda/es/reduce.js","original":{"line":50,"column":13}},{"generated":{"line":63,"column":26},"source":"../node_modules/ramda/es/reduce.js","original":{"line":50,"column":26}},{"name":"_reduce","generated":{"line":63,"column":47},"source":"../node_modules/ramda/es/reduce.js","original":{"line":50,"column":34}},{"generated":{"line":63,"column":63},"source":"../node_modules/ramda/es/reduce.js","original":{"line":50,"column":26}},{"generated":{"line":63,"column":64},"source":"../node_modules/ramda/es/reduce.js","original":{"line":50,"column":0}},{"name":"reduce","generated":{"line":64,"column":18},"source":"../node_modules/ramda/es/reduce.js","original":{"line":51,"column":15}}],"sources":{"../node_modules/ramda/es/reduce.js":"import _curry3 from './internal/_curry3';\nimport _reduce from './internal/_reduce';\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nvar reduce = /*#__PURE__*/_curry3(_reduce);\nexport default reduce;"},"lineCount":null}},"hash":"ec55f377b69f3ffa222d3c4edd76ba11","cacheData":{"env":{}}}