{"dependencies":[{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/package.json","includedInParent":true,"mtime":1528732074198},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/.babelrc","includedInParent":true,"mtime":1529143217746},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./invoker","loc":{"line":1,"column":20}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"./invoker\"),r=t(e);function t(e){return e&&e.__esModule?e:{default:e}}var u=(0,r.default)(1,\"split\");exports.default=u;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/ramda/es/split.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/ramda/es/split.js","original":{"line":3,"column":0}},{"generated":{"line":33,"column":0},"source":"../node_modules/ramda/es/split.js","original":{"line":23,"column":0}},{"name":"split","generated":{"line":33,"column":4},"source":"../node_modules/ramda/es/split.js","original":{"line":23,"column":4}},{"generated":{"line":33,"column":12},"source":"../node_modules/ramda/es/split.js","original":{"line":23,"column":12}},{"generated":{"line":33,"column":25},"source":"../node_modules/ramda/es/split.js","original":{"line":23,"column":25}},{"generated":{"line":33,"column":48},"source":"../node_modules/ramda/es/split.js","original":{"line":23,"column":33}},{"generated":{"line":33,"column":49},"source":"../node_modules/ramda/es/split.js","original":{"line":23,"column":25}},{"generated":{"line":33,"column":51},"source":"../node_modules/ramda/es/split.js","original":{"line":23,"column":36}},{"generated":{"line":33,"column":58},"source":"../node_modules/ramda/es/split.js","original":{"line":23,"column":25}},{"generated":{"line":33,"column":59},"source":"../node_modules/ramda/es/split.js","original":{"line":23,"column":0}},{"name":"split","generated":{"line":34,"column":18},"source":"../node_modules/ramda/es/split.js","original":{"line":24,"column":15}}],"sources":{"../node_modules/ramda/es/split.js":"import invoker from './invoker';\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      var pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nvar split = /*#__PURE__*/invoker(1, 'split');\nexport default split;"},"lineCount":null}},"hash":"b39fbc3a3ce02621c51cc450a4b2a048","cacheData":{"env":{}}}