{"dependencies":[{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/package.json","includedInParent":true,"mtime":1528732074198},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/.babelrc","includedInParent":true,"mtime":1529143217746},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./internal/_curry1","loc":{"line":1,"column":20}},{"name":"./curryN","loc":{"line":2,"column":19}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"./internal/_curry1\"),r=n(e),t=require(\"./curryN\"),u=n(t);function n(e){return e&&e.__esModule?e:{default:e}}var l=(0,r.default)(function(e){return(0,u.default)(e.length,e)});exports.default=l;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/ramda/es/curry.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/ramda/es/curry.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/ramda/es/curry.js","original":{"line":4,"column":0}},{"generated":{"line":58,"column":0},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":0}},{"name":"curry","generated":{"line":58,"column":4},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":4}},{"generated":{"line":58,"column":12},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":12}},{"generated":{"line":58,"column":25},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":25}},{"generated":{"line":58,"column":46},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":33}},{"name":"curry","generated":{"line":58,"column":55},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":42}},{"generated":{"line":58,"column":60},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":33}},{"name":"fn","generated":{"line":58,"column":61},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":48}},{"generated":{"line":58,"column":63},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":33}},{"generated":{"line":58,"column":65},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":52}},{"generated":{"line":59,"column":0},"source":"../node_modules/ramda/es/curry.js","original":{"line":46,"column":2}},{"generated":{"line":59,"column":9},"source":"../node_modules/ramda/es/curry.js","original":{"line":46,"column":9}},{"name":"fn","generated":{"line":59,"column":31},"source":"../node_modules/ramda/es/curry.js","original":{"line":46,"column":16}},{"name":"length","generated":{"line":59,"column":34},"source":"../node_modules/ramda/es/curry.js","original":{"line":46,"column":19}},{"generated":{"line":59,"column":40},"source":"../node_modules/ramda/es/curry.js","original":{"line":46,"column":9}},{"name":"fn","generated":{"line":59,"column":42},"source":"../node_modules/ramda/es/curry.js","original":{"line":46,"column":27}},{"generated":{"line":59,"column":44},"source":"../node_modules/ramda/es/curry.js","original":{"line":46,"column":9}},{"generated":{"line":59,"column":45},"source":"../node_modules/ramda/es/curry.js","original":{"line":46,"column":2}},{"generated":{"line":60,"column":0},"source":"../node_modules/ramda/es/curry.js","original":{"line":47,"column":1}},{"generated":{"line":60,"column":1},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":25}},{"generated":{"line":60,"column":2},"source":"../node_modules/ramda/es/curry.js","original":{"line":45,"column":0}},{"name":"curry","generated":{"line":61,"column":18},"source":"../node_modules/ramda/es/curry.js","original":{"line":48,"column":15}}],"sources":{"../node_modules/ramda/es/curry.js":"import _curry1 from './internal/_curry1';\nimport curryN from './curryN';\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;"},"lineCount":null}},"hash":"e804bdcb97eae829ec3b3a521be068ec","cacheData":{"env":{}}}