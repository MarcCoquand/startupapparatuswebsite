{"dependencies":[{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/package.json","includedInParent":true,"mtime":1528732074198},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/.babelrc","includedInParent":true,"mtime":1529143217746},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./internal/_curry1","loc":{"line":1,"column":20}},{"name":"./nAry","loc":{"line":2,"column":17}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"./internal/_curry1\"),r=n(e),t=require(\"./nAry\"),u=n(t);function n(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(function(e){return(0,u.default)(2,e)});exports.default=a;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/ramda/es/binary.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/ramda/es/binary.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/ramda/es/binary.js","original":{"line":4,"column":0}},{"generated":{"line":45,"column":0},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":0}},{"name":"binary","generated":{"line":45,"column":4},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":4}},{"generated":{"line":45,"column":13},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":13}},{"generated":{"line":45,"column":26},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":26}},{"generated":{"line":45,"column":47},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":34}},{"name":"binary","generated":{"line":45,"column":56},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":43}},{"generated":{"line":45,"column":62},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":34}},{"name":"fn","generated":{"line":45,"column":63},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":50}},{"generated":{"line":45,"column":65},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":34}},{"generated":{"line":45,"column":67},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":54}},{"generated":{"line":46,"column":0},"source":"../node_modules/ramda/es/binary.js","original":{"line":33,"column":2}},{"generated":{"line":46,"column":9},"source":"../node_modules/ramda/es/binary.js","original":{"line":33,"column":9}},{"generated":{"line":46,"column":29},"source":"../node_modules/ramda/es/binary.js","original":{"line":33,"column":14}},{"generated":{"line":46,"column":30},"source":"../node_modules/ramda/es/binary.js","original":{"line":33,"column":9}},{"name":"fn","generated":{"line":46,"column":32},"source":"../node_modules/ramda/es/binary.js","original":{"line":33,"column":17}},{"generated":{"line":46,"column":34},"source":"../node_modules/ramda/es/binary.js","original":{"line":33,"column":9}},{"generated":{"line":46,"column":35},"source":"../node_modules/ramda/es/binary.js","original":{"line":33,"column":2}},{"generated":{"line":47,"column":0},"source":"../node_modules/ramda/es/binary.js","original":{"line":34,"column":1}},{"generated":{"line":47,"column":1},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":26}},{"generated":{"line":47,"column":2},"source":"../node_modules/ramda/es/binary.js","original":{"line":32,"column":0}},{"name":"binary","generated":{"line":48,"column":18},"source":"../node_modules/ramda/es/binary.js","original":{"line":35,"column":15}}],"sources":{"../node_modules/ramda/es/binary.js":"import _curry1 from './internal/_curry1';\nimport nAry from './nAry';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      var takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      var takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nvar binary = /*#__PURE__*/_curry1(function binary(fn) {\n  return nAry(2, fn);\n});\nexport default binary;"},"lineCount":null}},"hash":"74f0601df60e38be842e6a9719e7efb7","cacheData":{"env":{}}}