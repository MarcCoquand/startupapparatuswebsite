{"dependencies":[{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/package.json","includedInParent":true,"mtime":1528732074198},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/frontend/.babelrc","includedInParent":true,"mtime":1529143217746},{"name":"/Users/marccoquand/Documents/work/startupapparatus/website/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./internal/_curry2","loc":{"line":1,"column":20}},{"name":"./internal/_equals","loc":{"line":2,"column":20}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"./internal/_curry2\"),r=n(e),t=require(\"./internal/_equals\"),u=n(t);function n(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)(function(e,r){return(0,u.default)(e,r,[],[])});exports.default=a;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/ramda/es/equals.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/ramda/es/equals.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/ramda/es/equals.js","original":{"line":4,"column":0}},{"generated":{"line":42,"column":0},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":0}},{"name":"equals","generated":{"line":42,"column":4},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":4}},{"generated":{"line":42,"column":13},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":13}},{"generated":{"line":42,"column":26},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":26}},{"generated":{"line":42,"column":47},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":34}},{"name":"equals","generated":{"line":42,"column":56},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":43}},{"generated":{"line":42,"column":62},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":34}},{"name":"a","generated":{"line":42,"column":63},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":50}},{"generated":{"line":42,"column":64},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":34}},{"name":"b","generated":{"line":42,"column":66},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":53}},{"generated":{"line":42,"column":67},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":34}},{"generated":{"line":42,"column":69},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":56}},{"generated":{"line":43,"column":0},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":2}},{"generated":{"line":43,"column":9},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":9}},{"name":"a","generated":{"line":43,"column":31},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":17}},{"generated":{"line":43,"column":32},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":9}},{"name":"b","generated":{"line":43,"column":34},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":20}},{"generated":{"line":43,"column":35},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":9}},{"generated":{"line":43,"column":37},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":23}},{"generated":{"line":43,"column":39},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":9}},{"generated":{"line":43,"column":41},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":27}},{"generated":{"line":43,"column":43},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":9}},{"generated":{"line":43,"column":44},"source":"../node_modules/ramda/es/equals.js","original":{"line":30,"column":2}},{"generated":{"line":44,"column":0},"source":"../node_modules/ramda/es/equals.js","original":{"line":31,"column":1}},{"generated":{"line":44,"column":1},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":26}},{"generated":{"line":44,"column":2},"source":"../node_modules/ramda/es/equals.js","original":{"line":29,"column":0}},{"name":"equals","generated":{"line":45,"column":18},"source":"../node_modules/ramda/es/equals.js","original":{"line":32,"column":15}}],"sources":{"../node_modules/ramda/es/equals.js":"import _curry2 from './internal/_curry2';\nimport _equals from './internal/_equals';\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = /*#__PURE__*/_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\nexport default equals;"},"lineCount":null}},"hash":"58c2175ecbe8e206fe7b945068ca9cef","cacheData":{"env":{}}}